// This file was generated by counterfeiter
package fakes

import (
	"net/http"
	"net/url"
	"sync"

	"github.com/robdimsdale/godoist/httphelper"
)

type FakeHTTPHelper struct {
	PostFormStub        func(uri string, data url.Values) (resp *http.Response, err error)
	postFormMutex       sync.RWMutex
	postFormArgsForCall []struct {
		uri  string
		data url.Values
	}
	postFormReturns struct {
		result1 *http.Response
		result2 error
	}
	ResponseBodyAsBytesStub        func(resp *http.Response) ([]byte, error)
	responseBodyAsBytesMutex       sync.RWMutex
	responseBodyAsBytesArgsForCall []struct {
		resp *http.Response
	}
	responseBodyAsBytesReturns struct {
		result1 []byte
		result2 error
	}
}

func (fake *FakeHTTPHelper) PostForm(uri string, data url.Values) (resp *http.Response, err error) {
	fake.postFormMutex.Lock()
	fake.postFormArgsForCall = append(fake.postFormArgsForCall, struct {
		uri  string
		data url.Values
	}{uri, data})
	fake.postFormMutex.Unlock()
	if fake.PostFormStub != nil {
		return fake.PostFormStub(uri, data)
	} else {
		return fake.postFormReturns.result1, fake.postFormReturns.result2
	}
}

func (fake *FakeHTTPHelper) PostFormCallCount() int {
	fake.postFormMutex.RLock()
	defer fake.postFormMutex.RUnlock()
	return len(fake.postFormArgsForCall)
}

func (fake *FakeHTTPHelper) PostFormArgsForCall(i int) (string, url.Values) {
	fake.postFormMutex.RLock()
	defer fake.postFormMutex.RUnlock()
	return fake.postFormArgsForCall[i].uri, fake.postFormArgsForCall[i].data
}

func (fake *FakeHTTPHelper) PostFormReturns(result1 *http.Response, result2 error) {
	fake.PostFormStub = nil
	fake.postFormReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeHTTPHelper) ResponseBodyAsBytes(resp *http.Response) ([]byte, error) {
	fake.responseBodyAsBytesMutex.Lock()
	fake.responseBodyAsBytesArgsForCall = append(fake.responseBodyAsBytesArgsForCall, struct {
		resp *http.Response
	}{resp})
	fake.responseBodyAsBytesMutex.Unlock()
	if fake.ResponseBodyAsBytesStub != nil {
		return fake.ResponseBodyAsBytesStub(resp)
	} else {
		return fake.responseBodyAsBytesReturns.result1, fake.responseBodyAsBytesReturns.result2
	}
}

func (fake *FakeHTTPHelper) ResponseBodyAsBytesCallCount() int {
	fake.responseBodyAsBytesMutex.RLock()
	defer fake.responseBodyAsBytesMutex.RUnlock()
	return len(fake.responseBodyAsBytesArgsForCall)
}

func (fake *FakeHTTPHelper) ResponseBodyAsBytesArgsForCall(i int) *http.Response {
	fake.responseBodyAsBytesMutex.RLock()
	defer fake.responseBodyAsBytesMutex.RUnlock()
	return fake.responseBodyAsBytesArgsForCall[i].resp
}

func (fake *FakeHTTPHelper) ResponseBodyAsBytesReturns(result1 []byte, result2 error) {
	fake.ResponseBodyAsBytesStub = nil
	fake.responseBodyAsBytesReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

var _ httphelper.HTTPHelper = new(FakeHTTPHelper)
